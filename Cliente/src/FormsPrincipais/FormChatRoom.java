/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package FormsPrincipais;

import ParteGrafica.JanelaChatGlobal;
import ParteGrafica.JanelaChatPrivado;
import ParteGrafica.JanelaNovoJogo;
import ParteGrafica.JanelaPrincipal;
import ParteGrafica.JanelaUsersSala;
import ParteGrafica.Notificacao;
import cliente.Comunicacao;
import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.JDesktopPane;

/**
 *
 * @author Rafael
 */
public class FormChatRoom extends JDesktopPane {

    /**
     * Creates new form FormChatRoom
     */
    private JanelaPrincipal grafico;
    private ArrayList<Notificacao> notificacoes;
    JanelaUsersSala jUsersSala;
    JanelaChatGlobal Jchat;
    JanelaNovoJogo fPopup;
    private ArrayList<JanelaChatPrivado> chatprivado;
    JanelaChatPrivado testePrivateChat;

    public FormChatRoom(JanelaPrincipal grafico) {

        this.grafico = grafico;
        initComponents();
        Dimension size = new Dimension(1100, 750);
        setSize(size);
        jUsersSala = new JanelaUsersSala(grafico.getComunicacao(), this);
        notificacoes = new ArrayList<>();
        Jchat = new JanelaChatGlobal(grafico);
        Jchat.show();
        add(Jchat);

        add(jUsersSala);
        jUsersSala.show();
        fPopup = new JanelaNovoJogo(this);
        add(fPopup);
        chatprivado = new ArrayList<>();


    }

    public JanelaNovoJogo getfPopup() {
        return fPopup;
    }

    public void showfPopup() {
        fPopup.showfInicio();
        fPopup.show();
    }

    public void addChatPrivado(String user) {
        System.out.println("Criar janela Chat privado ");
        for (int i = 0; i < chatprivado.size(); i++) {
            if (chatprivado.get(i).getNome().compareTo(user) == 0) {
                chatprivado.get(i).show();
                return;
            }
        }
        JanelaChatPrivado JcP = new JanelaChatPrivado(grafico, user);
        JcP.show();
        chatprivado.add(JcP);
        add(JcP);
    }

    public void ChatPrivado(String msg, String user) {
        System.out.println("Chat privado " + msg);
        for (int i = 0; i < chatprivado.size(); i++) {
            if (chatprivado.get(i).getNome().compareTo(user) == 0) {
                chatprivado.get(i).colocaMensagem(msg);
                chatprivado.get(i).toFront();
                chatprivado.get(i).transferFocus();


                return;
            }
        }
        addChatPrivado(user);
        ChatPrivado(msg, user);
    }

    public void setfPopup(JanelaNovoJogo formpopup1) {
        this.fPopup = formpopup1;
    }

    public void setLbusername() {
        Jchat.setLbusername(grafico.getComunicacao().getUser());
    }

    public void AddNotificacao(String jogador) {
        Notificacao noti = new Notificacao(jogador, this);
        notificacoes.add(noti);
        noti.show();
        noti.toFront();
        add(noti);
    }

    public void removeNotificacao(String jogador) {
        for (int i = 0; i < notificacoes.size(); i++) {
            if (notificacoes.get(i).getJogador().compareTo(jogador) == 0) {
                notificacoes.get(i).hide();
                notificacoes.remove(i);
                break;
            }
        }
        this.repaint();
    }

    public void invite(String jogador) {
        if (fPopup.getfInvite().isAceitesEmpty()) {
            fPopup.getfInvite().addAceite(grafico.getComunicacao().getUser());
        }
        fPopup.getfInvite().addConvidado(jogador);
        fPopup.getfInvite().update();
        //fPopup.showfInvite();
        fPopup.show();
    }

    public void AceitaInvite(String user) {
        grafico.getComunicacao().AceitaInvite(user);
        grafico.getComunicacao().setEstado(Comunicacao.ESTADO_INVITE);
        fPopup.showfInvite();
        fPopup.show();
        removeNotificacao(user);
        //falta entrar no jogo
    }

    public void RecusaInvite(String user) {
        grafico.getComunicacao().RecusaInvite(user);
        
        removeNotificacao(user);
    }

    public JanelaPrincipal getGrafico() {
        return grafico;
    }

    public void Update() {

        jUsersSala.setUserssala(grafico.getComunicacao().getUsersSala());
       
    }

    public void setGrafico(JanelaPrincipal grafico) {
        this.grafico = grafico;
        this.setSize(grafico.getSize());
    }

    public void colocaMensagemSistema(String msg) {//escreve mensagens a vermelho
        Jchat.colocaMensagemSistema(msg);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(900, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1207, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void colocaMensagem(String mensagem) {
        Jchat.colocaMensagem(mensagem);
    }

    @Override
    public void show() {
        super.show();
        fPopup.setVisible(false);
    }
    
}
